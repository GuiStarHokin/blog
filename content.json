{"meta":{"title":"Ho kin Blog","subtitle":"","description":null,"author":"Ho kin","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2018-01-04T16:00:00.000Z","updated":"2022-11-10T02:33:54.000Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-01-04T16:00:00.000Z","updated":"2022-11-10T02:34:12.000Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-04-07T11:08:40.451Z","updated":"2022-11-09T17:49:43.000Z","comments":true,"path":"css/custom.css","permalink":"http://example.com/css/custom.css","excerpt":"","text":"/*全局背景透明渐变*/ #recent-posts>.recent-post-item,.layout_page>div:first-child:not(.recent-posts),.layout_post>#page,.layout_post>#post,.read-mode .layout_post>#post { background: var(--light_bg_color) } #aside-content .card-widget { background: var(--light_bg_color) } #web_bg { background: linear-gradient(90deg,rgba(247,149,51,.1),rgba(243,112,85,.1) 15%,rgba(239,78,123,.1) 30%,rgba(161,102,171,.1) 44%,rgba(80,115,184,.1) 58%,rgba(16,152,173,.1) 72%,rgba(7,179,155,.1) 86%,rgba(109,186,130,.1)) } /*页脚透明渐变*/ #footer { background: rgba(255,255,255,.15); color: #000; border-top-right-radius: 20px; border-top-left-radius: 20px; backdrop-filter: saturate(100%) blur(5px) } #footer::before { background: rgba(255,255,255,.15) } #footer #footer-wrap { color: var(--font-color) } #footer #footer-wrap a { color: var(--font-color) }"},{"title":"","date":"2023-04-07T11:08:40.452Z","updated":"2022-11-13T07:13:14.000Z","comments":true,"path":"css/icon.css","permalink":"http://example.com/css/icon.css","excerpt":"","text":"svg.icon { width: 1.5em; height: 1.5em; /* width和height定义图标的默认宽度和高度*/ vertical-align: -0.15em; fill: currentColor; overflow: hidden; } /* 请务必在_config.butterfly.yml文件该位置引入该样式表，才能使样式生效 inject: head: - */"},{"title":"","date":"2023-04-07T11:08:40.454Z","updated":"2022-11-10T06:25:28.000Z","comments":true,"path":"dist/APlayer.min.css","permalink":"http://example.com/dist/APlayer.min.css","excerpt":"","text":".aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;transition:all .3s ease;max-width:400px}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#00ffffff\",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:\" \"}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#00ffffff\",endColorstr=\"#ccffffff\",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;transition:all .5s ease-out;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;transition:all .5s ease;will-change:height;display:none;overflow:hidden}.aplayer .aplayer-list.aplayer-list-hide{max-height:0!important}.aplayer .aplayer-list ol{list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list ol::-webkit-scrollbar{width:5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list ol li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list ol li:first-child{border-top:none}.aplayer .aplayer-list ol li:hover{background:#efefef}.aplayer .aplayer-list ol li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}} /*# sourceMappingURL=APlayer.min.css.map*/"},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2022-11-10T02:34:27.000Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"","date":"2023-04-07T11:08:40.455Z","updated":"2022-11-10T06:25:28.000Z","comments":true,"path":"dist/APlayer.min.js","permalink":"http://example.com/dist/APlayer.min.js","excerpt":"","text":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"APlayer\",[],t):\"object\"==typeof exports?exports.APlayer=t():e.APlayer=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=41)}([function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=/mobile/i.test(window.navigator.userAgent),a={secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return(t>0?[t,n,i]:[n,i]).map(function(e){return e=0;t--){var n=Math.floor(Math.random()*(t+1)),i=e[n];e[n]=e[t],e[t]=i}return e}([].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);ti?t:e+(t-e)*((a=n/i)n?\"function\"==typeof i&&i(t):l(u)}()},n=function(e){if(!e.defaultPrevented){e.preventDefault(),location.hash!==this.hash&&window.history.pushState(null,null,this.hash);var n=document.getElementById(this.hash.substring(1));if(!n)return;t(n,500,function(e){location.replace(\"#\"+e.id)})}};return document.addEventListener(\"DOMContentLoaded\",function(){for(var e,t=document.querySelectorAll('a[href^=\"#\"]:not([href=\"#\"])'),i=t.length;e=t[--i];)e.addEventListener(\"click\",n,!1)}),t}})?i.call(t,n,t,e):i)||(e.exports=a)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;n1),n=0===this.audios.length;this.player.template.listOl.innerHTML+=(0,a.default)({theme:this.player.options.theme,audio:e,index:this.audios.length+1}),this.audios=this.audios.concat(e),t&&this.audios.length>1&&this.player.container.classList.add(\"aplayer-withlist\"),this.player.randomOrder=r.default.randomOrder(this.audios.length),this.player.template.listCurs=this.player.container.querySelectorAll(\".aplayer-list-cur\"),this.player.template.listCurs[this.audios.length-1].style.backgroundColor=e.theme||this.player.options.theme,n&&(\"random\"===this.player.options.order?this.switch(this.player.randomOrder[0]):this.switch(0))}},{key:\"remove\",value:function(e){if(this.player.events.trigger(\"listremove\",{index:e}),this.audios[e])if(this.audios.length>1){var t=this.player.container.querySelectorAll(\".aplayer-list li\");t[e].remove(),this.audios.splice(e,1),this.player.lrc&&this.player.lrc.remove(e),e===this.index&&(this.audios[e]?this.switch(e):this.switch(e-1)),this.index>e&&this.index--;for(var n=e;n"},{"title":"电影","date":"2018-01-04T16:00:00.000Z","updated":"2022-11-10T02:34:57.000Z","comments":true,"path":"movies/index.html","permalink":"http://example.com/movies/index.html","excerpt":"","text":""},{"title":"","date":"2023-04-07T11:08:40.458Z","updated":"2022-11-10T06:50:18.000Z","comments":true,"path":"dist/music.js","permalink":"http://example.com/dist/music.js","excerpt":"","text":"const ap = new APlayer({ container: document.getElementById('aplayer'), fixed: true, autoplay: true, //自动播放 audio: [ { name: '', artist: '', url: '', cover: '', }, ] });"},{"title":"音乐","date":"2018-01-04T16:00:00.000Z","updated":"2022-11-10T08:43:19.000Z","comments":true,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":""},{"title":"","date":"2023-04-07T11:08:40.461Z","updated":"2022-11-13T06:18:27.000Z","comments":true,"path":"tags/iconfont.js","permalink":"http://example.com/tags/iconfont.js","excerpt":"","text":"'use strict'; function iconFont(args) { args = args.join(' ').split(',') let p0 = args[0] let p1 = args[1]?args[1]:1 return ``; } hexo.extend.tag.register('icon',iconFont);"},{"title":"标签","date":"2018-01-04T16:00:00.000Z","updated":"2022-11-10T02:35:32.000Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Video Sharing","slug":"Video-Sharing","date":"2023-04-09T05:30:10.000Z","updated":"2023-04-09T06:11:57.052Z","comments":true,"path":"2023/04/09/Video-Sharing/","link":"","permalink":"http://example.com/2023/04/09/Video-Sharing/","excerpt":"","text":"HANA菊梓喬 - 相信愛情 (劇集《食腦喪B》插曲)劇集MV_哔哩哔哩_bilibili 【指弹吉他】周杰伦都叫绝！《稻香》| 还记得你说家是唯一的城堡，随着稻香河流继续奔跑_哔哩哔哩_bilibili","categories":[],"tags":[]},{"title":"","slug":"Markdown语法","date":"2023-04-07T11:08:40.468Z","updated":"2022-12-03T09:50:11.000Z","comments":true,"path":"2023/04/07/Markdown语法/","link":"","permalink":"http://example.com/2023/04/07/Markdown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"1.标题这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题2.菜单 叉烧包 糯米鸡 蒸排骨 干蒸烧卖 油炸鬼 3.引用 ps.welcome to use markdown 4.粗体和斜体这是粗体这是斜体 5.高亮强调This is a high light 6.代码高亮c scripts: 12345678#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123; printf(&quot;hello markdown!\\n&quot;);&#125;system(&quot;pause&quot;);return 0; 7.链接这是BiliBili的网站 8.插入图片 9.分割线 10.插入视频 11.表格 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 12.","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-04-07T11:08:40.464Z","updated":"2022-11-07T08:10:17.000Z","comments":true,"path":"2023/04/07/hello-world/","link":"","permalink":"http://example.com/2023/04/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"数据结构（C语言版 第2版） (严蔚敏)","slug":"数据结构（C语言版-第2版）-严蔚敏","date":"2023-04-03T11:39:38.000Z","updated":"2023-04-09T07:31:23.628Z","comments":true,"path":"2023/04/03/数据结构（C语言版-第2版）-严蔚敏/","link":"","permalink":"http://example.com/2023/04/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88C%E8%AF%AD%E8%A8%80%E7%89%88-%E7%AC%AC2%E7%89%88%EF%BC%89-%E4%B8%A5%E8%94%9A%E6%95%8F/","excerpt":"","text":"第一章 绪论1.2 基本概念和术语 数据是客观事物的符号表示，是所有能输入到计算机中并被计算机程序处理的符号的总称 数据元素是数据的基本单位 数据项，是组成数据元素的、有独立含义的、不可分割的最小单位 数据对象是性质相同的数据元素的集合，是数据的一个子集 1.2.2 数据结构 数据结构是相互之间存在一种或多种特定关系的数据元素的集合 数据结构包含逻辑结构和存储结构两个层次 逻辑结构 数据的逻辑结构是从逻辑关系上描述数据，它与数据的存储无关，是独立于计算机的 数据的逻辑结构有两个要素：一是元素；二是关系 通常有四类基本结构:集合结构，线性结构，树结构，图结构（网状结构） 其中集合结构，树结构，图结构都属于非线性结构 线性结构包括：线性表、栈和队列、字符串、数组、广义表 非线性结构包括：树、二叉树、有向图、无向图 存储结构 数据对象在计算机中的存储表示称为数据的存储结构，也称为物理结构 数据元素在计算机中有两种基本的存储结构，分别是顺序存储结构和链式存储结构 顺序存储结构：顺序存储结构是借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系，通常借助程序设计语言的数组类型来描述 顺序存储结构要求所有的元素依次存放在一片连续的存储空间中，链式存储结构，无需占用一整块存储空间 1.2.3 数据类型和抽象数据类型 数据类型 数据类型是一个值的集合和定义在这个值集上的一组操作的总称 抽象数据类型 一般指由用户定义的，表示应用问题的数学模型，以及定义在这个模型上的一组操作的总称，具体包括三部分：数据对象、数据对象上关系的集合以及对数据对象的基本操作的集合 1.4 算法和算法分析 1.4.1 算法的定义及特性 算法是为了解决某类问题而规定的一个有限长的操作序列 一个算法必须满足以下五个重要特性： （1）有穷性：有穷步、有穷时间（2）确定性：确切对规定，不会产生二义性（3）可行性：已经实现的基本操作运算执行有限次（4）输入：零个或多个输入（5）输出：一个或多个输出 1.4.2 评价算法优劣的基本标准 （1）：正确性 （2）：可读性 （3）：健壮性 （4）：高效性 1.4.3 算法的时间复杂度 衡量算法效率的方法主要有两类：事后统计法和事前分析估算法 问题规模是算法求解问题输入量的多少，是问题大小的本质表示，一般用整数n表示 一个算法的执行时间大致上等于其所有语句执行时间的总和，而语句的执行时间则为该条语句的重复执行次数和执行一次所需时间的乘积 一条语句的重复执行次数称为语句频度 第二章 线性表 线性结构的基本特点是除第一个元素无直接前驱，最后一个元素无直接后驱之外，其他每个数据元素都有一个前驱和后继。线性表是最基本且最常用的一种线性结构 2.1 线性表的定义和特点 2.2 案例引入 2.4 线性表的顺序表示和实现2.4.1 线性表的顺序存储表示 线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素，这种表示也称作线性表的顺序存储结构或顺序映像。通常，称这种存储结构的线性表为顺序表。其特点是，逻辑上相邻的数据元素，其物理次序也是相邻的。 线性表的顺序存储结构是一种随机存取的存储结构 通常用数组来描述数据结构中的顺序存储结构","categories":[],"tags":[]},{"title":"各系统下创建Python虚拟环境","slug":"各系统下创建Python虚拟环境","date":"2023-03-30T10:09:53.000Z","updated":"2023-03-30T11:05:48.449Z","comments":true,"path":"2023/03/30/各系统下创建Python虚拟环境/","link":"","permalink":"http://example.com/2023/03/30/%E5%90%84%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%88%9B%E5%BB%BAPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","excerpt":"","text":"前提准备 没有配置PiP国内镜像源的可以先参考这篇文章进行配置PiPPiP相关知识 | Ho kin Blog Windows版 打开命令提示符或PowerShell，进入要创建虚拟环境的目录。 安装Python虚拟环境管理器virtualenv，如果您还没有安装，可以使用以下命令安装： 1pip install virtualenv 如果您使用的是Python 3，则使用以下命令安装： 1pip3 install virtualenv 创建一个新的虚拟环境，可以使用以下命令： 1virtualenv venv 这将创建一个名为venv的新虚拟环境。您可以更改名称为您想要的名称。 激活虚拟环境，可以使用以下命令： 1venv\\Scripts\\activate 在虚拟环境中运行的所有Python命令和脚本都将使用虚拟环境中的Python解释器和相关库。 在虚拟环境中安装所需的Python包，可以使用以下命令： 1pip install package_name 替换package_name为您要安装的包的名称。 当您完成工作并想要离开虚拟环境时，可以使用以下命令停止虚拟环境： 1deactivate 这将停止虚拟环境，并将您带回您的常规操作系统环境中。 Linux版 打开终端应用程序，进入要创建虚拟环境的目录。 安装Python虚拟环境管理器virtualenv，如果您还没有安装，可以使用以下命令安装1pip install virtualenv 如果您使用的是Python 3，则使用以下命令安装：1pip3 install virtualenv 创建一个新的虚拟环境，可以使用以下命令：1virtualenv venv 这将创建一个名为venv的新虚拟环境。您可以更改名称为您想要的名称。 激活虚拟环境，可以使用以下命令：1source venv/bin/activate 在虚拟环境中运行的所有Python命令和脚本都将使用虚拟环境中的Python解释器和相关库。 在虚拟环境中安装所需的Python包，可以使用以下命令：1pip install package_name 替换package_name为您要安装的包的名称。 当您完成工作并想要离开虚拟环境时，可以使用以下命令停止虚拟环境：1deactivate 这将停止虚拟环境，并将您带回您的常规操作系统环境中。 MacOS版 打开终端应用程序，进入要创建虚拟环境的目录。 安装Python虚拟环境管理器virtualenv，如果您还没有安装，可以使用以下命令安装1pip install virtualenv 如果您使用的是Python 3，则使用以下命令安装：1pip3 install virtualenv 创建一个新的虚拟环境，可以使用以下命令：1virtualenv venv 这将创建一个名为venv的新虚拟环境。您可以更改名称为您想要的名称。 激活虚拟环境，可以使用以下命令：1source venv/bin/activate 在虚拟环境中运行的所有Python命令和脚本都将使用虚拟环境中的Python解释器和相关库。 在虚拟环境中安装所需的Python包，可以使用以下命令：1pip install package_name 替换package_name为您要安装的包的名称。 当您完成工作并想要离开虚拟环境时，可以使用以下命令停止虚拟环境：1deactivate 这将停止虚拟环境，并将您带回您的常规操作系统环境中。","categories":[],"tags":[]},{"title":"Windows+黑苹果+Ubuntu三系统","slug":"Windows-黑苹果-Ubuntu三系统","date":"2023-03-02T15:07:18.000Z","updated":"2023-04-07T13:41:29.288Z","comments":true,"path":"2023/03/02/Windows-黑苹果-Ubuntu三系统/","link":"","permalink":"http://example.com/2023/03/02/Windows-%E9%BB%91%E8%8B%B9%E6%9E%9C-Ubuntu%E4%B8%89%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"必看资料 主页 - 国光的黑苹果安装教程：手把手教你配置 OpenCore 第1节 教程概览_哔哩哔哩_bilibili 【黑苹果】macOS 13 Ventura 原版 OC 引导安装教程 - 苹果地带 单硬盘安装多系统步骤 磁盘分区步骤： 把整块硬盘的所有分区清空，然后保存更改 把硬盘转换为GPT格式（即GUID为灰色的状态） 右键磁盘视图（磁盘条状图）右键建立新分区-&gt;取消勾选建立MSR分区（微软保留分区），勾选建立ESP（EFI System Partition）分区，ESP分区的大小设置为300M，设置4096（4K）对齐 建立新分区，文件系统NTFS，4k对齐，用于存放Windows系统，保存更改，格式化分区 Windows需要额外分区的可以根据自己的需要进行分区，文件系统为NTFS，4k对齐，保存更改，格式化分区 建立新分区，文件系统exFAT，4k对齐，用于存放MacOS系统，保存更改，格式化分区 建立新分区，文件系统EXT4，4k对齐，用于存放Linux系统，保存更改，格式化分区 选中硬盘ESP分区，右键格式化当前分区，把文件系统改成FAT32 大功告成 Windows系统安装步骤： 进入PE中利用Windows安装器安装好Windows （”Windows安装文件的位置”:选择你的Windows ISO镜像，”引导驱动器位置”：选择硬盘中的ESP分区，”安装驱动器的位置”：选择C盘，选项中选择自己想要安装的Windows系统版本，点击安装即可） PE中出现重启SyPrep阶段开始就点击重启，趁电脑关机的一瞬间把U盘拔下来（即从硬盘中启动Windows） 大功告成 MacOS系统安装步骤：安装好Windows后进入Windows先下载好驱动先（否则黑苹果后电脑型号将被更改）（可以通过360驱动大师进行驱动下载）&amp;&amp;（系统更新下载驱动） 制作好MacOS系统U盘 把U盘中ESP分区中的EFI文件夹删除，然后把你自己处理好（改好三码之后）的EFI文件夹复制进去 关闭电脑，插入U盘，进入BIOS选择U盘启动，进入OC界面，然后选择Install macos进行安装 大功告成 把此时的EFI文件夹备份一份到U盘中！！！！ 配置OC引导的MacOS的启动项： 完善引导 - 国光的黑苹果安装教程：手把手教你配置 OpenCore2.（DiskGenius） 软件操作都大同小异 启动项名称：随意，自己认识即可 硬盘：选择你的单硬盘 分区：选择硬盘中的ESP分区 启动文件：\\EFI\\OC\\OPENCONRE.EFI 然后上移到最前面，点击保存当前启动项设置即可 Ubuntu系统安装： 把Ubutnu IOS镜像放入用Ventoy制作好的U盘中 进入BIOS中选择U盘启动 选择Try or Install Ubuntu进入系统，进入后选择试用Ubuntu，然后打开设置连接Wi-Fi，打开软件和更新，把”下载自”中的服务器地址改为南京大学或阿里云等国内的镜像源 双击桌面上的安装Ubuntu 安装类型中选择”其他选项” 选中被标记为EXT4的设备 e.g:sda3(ext4)，那么sda就是用来装Linux的硬盘，sda3就是装Linux的分区，点击”-“号 选择需要装Linux的空闲分区，点击”+”号，分配8640MB，用于交换系统 选择需要装Linux的空闲分区，点击”+”号，分配其余的，用于Ext4日志文件系统，挂载点为”&#x2F;“ 安装引导器的设置，选择FAT32或EFI分区所在的分区（我的位于sda1） 系统安装大功告成 配置OC引导ubuntu的启动项： 进入BIOS，把oc设置为第一启动项 选择OpenShell.efi 输入”FS0:”回车 输入”ls”回车 输入”cd EFI”回车 如果看到EFI文件夹中有Ubuntu这个文件夹的话 输入”map &gt; map-table-linux.txt” 没有的话就尝试进入FS1&#x2F;FS2&#x2F;FS3…. 输入exit退出 把ProperTree和DiskGenius放入u盘中 进入windows系统 打开DiskGenius，选中硬盘中的EFI分区，进入EFI文件夹，观察是否有一个叫map-table-linux.txt的文件，有的话就操作无误 打开ProperTree，打开map-table-linux.txt 在ProperTress中打开硬盘EFI分区，EFI文件夹中的OC文件夹中的config.plist(可以把config.plist复制到桌面，修改完成后再到原处替换文件) 注意，不能使用opencore或OCAT等工具改，容易出Bug，用ProperTree最稳定 Windows打开ProperTree.bat（电脑需要先安装Python），MacOS打开ProperTree.command MacOS挂载EFI分区命令（diskutil list-&gt;sudo diskutil mount disk0s1(因人而异，type为EFI的就行)） 搜索Misc，找到Entries 选中Entries，右键New chilid under “Entries”(+) 选中新创建的项目，把type改为Dictionary 然后右键New child under ‘0’(+) 6次 然后分别对这六项的Key，Type，Value进行设置（以下从上到下一一对应，没有填就就是留空） Arguments-&gt;String-&gt; Auxiliary-&gt;Boolean-&gt;False Comment-&gt;String-&gt; Enabled-&gt;Boolean-&gt;True Name-&gt;String-&gt;(启动项名字，自己定义 E.g：Ubuntu) Path-&gt;String-&gt;(添加刚刚FS0对应的) PciRoot(0x0)&#x2F;Pci(0x1F,0x2)&#x2F;Sata(0x3,0xFFFF,0x0)&#x2F;HD(1,GPT,91E8F24-D32E-4E69-AF6D-C02DDD636CA9,0x1000,0x96000) &#x2F;\\EFI\\ubuntu\\grubx64.efi 然后打开DiskGenius把改好的文件替换掉 最后把OC的启动项改成第一启动项即可 大功告成 参考资料 黑苹果适配机型SMBIOS速查表 - 苹果地带 台式 Comet Lake | OpenCore安装指南 问题解决 Mac安装系统副本损坏： ​ Mac安装系统副本损坏？Mac安装系统应用程序副本已损坏解决方法 - 哔哩哔哩 ​ macOS Mojave 10.14安装中常见的问题及解决方法 | 黑果小兵的部落阁 ​ macOS Mojave 10.14安装中常见的问题及解决方法 | 黑果小兵的部落阁 Mac-WiFi配置： ​ 黑苹果 Catalina &amp; Big Sur 系统下修复inte l无线及蓝牙_哔哩哔哩_bilibili ​ OpenCore单硬盘GPT多分区黑苹果macOS Catalina 10.15.6 Win10 Ubuntu Linux 20.04LTS三系统引导教程_哔哩哔哩_bilibili 资源下载 VK22 EFI: liquitar&#x2F;NEC-VK22 (github.com)最新黑苹果安装教程所需工具下载 - 零度解说 MacOS镜像： 【黑果小兵】macOS Mojave 10.14.6 18G103 正式版 with Clover 5091原版镜像[双EFI双平台终极版] | 黑果小兵的部落阁 优化 打开HIDPI： ​ HiDPI 是什么？以及黑苹果如何开 HiDPI | 国光 打开任何应用来源： 1sudo spctl --master-disable MacOS必备软件 MAC精品软件 | 国光 Paragon NTFS: 分享Paragon NTFS for Mac 无限试用破解版 - HUIHUIDEHUI.com Paragon NTFS Mac破解软件下载 - Paragon NTFS for Mac免费软件下载 - Paragon NTFS：让Mac系统读写NTFS的工具- 知您网(zhiniw.com) Paragon NTFS for Mac 15.8.243 中文激活破解版-NTFS 读写工具 - 花间社 推荐论坛 苹果地带 极限苹果-Mac论坛-提供Mac软件和macOS苹果系统镜像下载","categories":[],"tags":[]},{"title":"细节题","slug":"细节题","date":"2023-02-20T15:00:49.000Z","updated":"2023-02-20T15:20:57.051Z","comments":true,"path":"2023/02/20/细节题/","link":"","permalink":"http://example.com/2023/02/20/%E7%BB%86%E8%8A%82%E9%A2%98/","excerpt":"","text":"一.编程题 1.求！打印的次数 123456789101112131415#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123; int k; int i; for(i = 0,k = 0;k = 0;k++,i++) &#123; k++; printf(&quot;!&quot;); &#125; system(&quot;pause&quot;); return 0;&#125; 答案：打印0次，因为for循环中的表达式二为k&#x3D;0结果为假，执行完表达式一后，执行表达式二，表达式二结果为假，故不进入for循环体中 1.2.求！打印的次数 123456789101112131415#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123; int k; int i; for(i = 0,k = 0;i==0, k &gt;= 0,;k++,i++) &#123; k++; printf(&quot;!&quot;); &#125; system(&quot;pause&quot;); return 0;&#125; 答案：死循环打印,for循环中的表达式二为逗号表达式，表达式的逻辑结果（真假结果）取决于最后一个逗号后的值，因为k&gt;&#x3D;0的值为真，所以i&#x3D;&#x3D;0，k&gt;&#x3D;0整个表达式的值为真，相当于i&#x3D;&#x3D;0被悬空了 二.选择题 1.若给定条件表达式 (M)?(a++):(a–) ，则其中表达式 M （ ） A: 和(M&#x3D;&#x3D;0)等价 B: 和(M&#x3D;&#x3D;1)等价 C: 和(M!&#x3D;0)等价 D: 和(M!&#x3D;1)等价 1答案：C，假设表达式M的逻辑结果为真（非0的值），则（M！=0）整体的逻辑结果也为真；假设表达式M的逻辑结果为假（值为0），则（M!=0）整体的逻辑结果的值也为假，故选C","categories":[{"name":"复习","slug":"复习","permalink":"http://example.com/categories/%E5%A4%8D%E4%B9%A0/"}],"tags":[]},{"title":"qsort()函数","slug":"qsort()函数","date":"2023-02-17T16:06:46.000Z","updated":"2023-02-19T10:14:36.192Z","comments":true,"path":"2023/02/18/qsort()函数/","link":"","permalink":"http://example.com/2023/02/18/qsort()%E5%87%BD%E6%95%B0/","excerpt":"","text":"一.qsort函数简介 功能：执行快速排序 头文件：#include &lt;stdlib.h&gt;或#include &lt;search.h&gt; 时间复杂度：n*log（n） 🍑函数声明： 123#include &lt;stdlib.h&gt; extern void qsort(void *base, size_t num, size_t width, int(_cdecl *compare)(const void *elem1, cont void *elem2)); 🍑参数解释：base:待排序的目标数组的起始位置num:数组的元素的个数width:数组中每个元素的大小（字节）compare:比较函数，这个需要我们自己去根据自己的场景进行设计 compare函数的声明： 1extern int MyCompare(const void *e1, const void *e2); Mycompare函数的返回值： 小于0:元素1小于元素2 等于0:元素1等于元素2 大于0:元素1大于元素2 qsort函数详细声明 二、qsort()函数应用 🍑对整型数据进行排序：main()及头文件设计: 12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt; //printf#include &lt;windows.h&gt; //system(&quot;pause&quot;)#include &lt;stdlib.h&gt; //qsortint main()&#123;int arr[] = &#123;0, -1, 1, 9, 7, 3, 4, 6, 5, 8, 2, 10&#125;;int sz = sizeof(arr) / sizeof(arr[0]); // 求出数组长度int i = 0;printf(&quot;排序前:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123; printf(&quot;%d &quot;, arr[i]);&#125;qsort(arr, sz, sizeof(int), CompareInt); // 开始排序printf(&quot;\\n排序后:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123;printf(&quot;%d &quot;, arr[i]);&#125;printf(&quot;\\n&quot;);system(&quot;pause&quot;);return 0;&#125; compare函数设计 1234int CompareInt(const void *e1, const void *e2)&#123;return (*((int*)e1) - *((int*)e2)); // 相减的结果有&gt;0,&lt;0,==0三种情况&#125; 运行结果： 🍑对浮点型数据进行排序：main()以及头文件设计： 1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt; //printf#include &lt;windows.h&gt; //system(&quot;pause&quot;)#include &lt;stdlib.h&gt; //qsort#include &lt;math.h&gt; //fabsint main()&#123;double arr[] = &#123;0.0, -1.0, 1.2, 9.4, 7.5, 3.7, 4.4, 6.7, 5.2, 8.5, 2.2, 10.9&#125;;int sz = sizeof(arr) / sizeof(arr[0]); // 求出数组长度int i = 0;printf(&quot;排序前:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123; printf(&quot;%.2lf &quot;, arr[i]);&#125;qsort(arr, sz, sizeof(double), CompareDouble); // 开始排序printf(&quot;\\n排序后:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123; printf(&quot;%.2lf &quot;, arr[i]);&#125;printf(&quot;\\n&quot;);system(&quot;pause&quot;);return 0;&#125; compare函数设计: 123456789101112131415int CompareDouble(const void *e1, const void *e2) // 浮点数直接相减是会有精度损失的，所以采用分支语句&#123;if (*((double*)e1) &gt; *((double*)e2))&#123; return 1; //e1&gt;e2&#125;else if (*((double*)e1) &lt; *((double*)e2))&#123; return -1; //e1&lt;e2&#125;else if (fabs(*((double*)e1) - *((double*)e2)) &lt; __DBL_EPSILON__)&#123; return 0; // e1==e2&#125;&#125; 运行结果: tip:因为浮点数的十进制转换为二进制会有进度损失，所以比较两个浮点数e1，e2是否相等不能直接用“&#x3D;&#x3D;”来比较，需要使用fabs（e1-e2）&lt; DBL__EPSILON(最小精度)的方式来进行比较 🍑对字符进行排序main()函数及头文件设计 12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt; //printf#include &lt;windows.h&gt; //system(&quot;pause&quot;)#include &lt;stdlib.h&gt; //qsortint main()&#123;char arr[] = &#123;&#x27;b&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;d&#x27;&#125;;int sz = sizeof(arr) / sizeof(arr[0]); // 求出数组长度int i = 0;printf(&quot;排序前:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123; printf(&quot;%c &quot;, arr[i]);&#125;qsort(arr, sz, sizeof(char), CompareChar); // 开始排序printf(&quot;\\n排序后:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123; printf(&quot;%c &quot;, arr[i]);&#125;printf(&quot;\\n&quot;);system(&quot;pause&quot;);return 0;&#125; compare函数设计 1234int CompareChar(const void *e1, const void *e2)&#123;return ((*(char*)e1) - *((char*)e2)); // 相减的结果有&gt;0,&lt;0,==0三种情况&#125; 运行结果 🍑按字符串首字母进行排序main()函数及头文件设计 12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt; //printf#include &lt;windows.h&gt; //system(&quot;pause&quot;)#include &lt;stdlib.h&gt; //qsortint main()&#123;char arr[3][4] = &#123;&#123;&quot;abc&quot;&#125;, &#123;&quot;cab&quot;&#125;, &#123;&quot;bac&quot;&#125;&#125;; // 把arr看成一个有3个元素的一维数组，其中arr有3个元素，每个元素是一个4个元素的一维数组int sz = sizeof(arr) / sizeof(arr[0]); // 求出数组长度int i = 0;printf(&quot;排序前:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123; printf(&quot;%s &quot;, arr[i]);&#125;qsort(arr, sz, sizeof(char[4]), CompareStr); // 开始排序,char arr[3][4]含义:arr数组有3个元素，每个元素大小以及类型是char[4]printf(&quot;\\n排序后:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123; printf(&quot;%s &quot;, arr[i]);&#125;printf(&quot;\\n&quot;);system(&quot;pause&quot;);return 0;&#125; compare函数设计 1234int CompareStr(const void *e1, const void *e2)&#123;return ((*(char*)e1) - *((char*)e2)); // 相减的结果有&gt;0,&lt;0,==0三种情况&#125; 运行结果 🍑按字符串长度进行排序main（）函数及头文件设计 1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt; // printf#include &lt;windows.h&gt; // system(&quot;pause&quot;)#include &lt;stdlib.h&gt; // qsort#include &lt;string.h&gt; // strlenint main()&#123;char arr[3][8] = &#123;&#123;&quot;bacaaaa&quot;&#125;, &#123;&quot;cabaa&quot;&#125;, &#123;&quot;abca&quot;&#125;&#125;; // 把arr看成一个有3个元素的一维数组int sz = sizeof(arr) / sizeof(arr[0]); // 求出数组长度int i = 0;printf(&quot;排序前:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123; printf(&quot;%s &quot;, arr[i]);&#125;qsort(arr, sz, sizeof(char[8]), CompareStrlen); // 开始排序printf(&quot;\\n排序后:&gt;&quot;);for (i=0; i&lt;sz; i++)&#123; printf(&quot;%s &quot;, arr[i]);&#125;printf(&quot;\\n&quot;);system(&quot;pause&quot;);return 0;&#125; compare函数设计 123456789101112131415161718int CompareStrlen(const void *e1, const void *e2) /* strlen的返回值是size_t 即unsigned int 无符号整形，所以最好不要对无符号整形直接相减*/&#123;if (strlen(e1) &gt; strlen(e2))&#123; return 1;&#125;else if (strlen(e1) &lt; strlen(e2))&#123; return -1;&#125;else if (strlen(e1) == strlen(e2))&#123; return 0;&#125;&#125; 运行结果： 🍑结构体排序应用stu.h 1234567891011121314151617181920212223242526272829303132333435363738#ifndef __STU_H__#define __STU_H__#include &lt;stdio.h&gt;#include &lt;windows.h&gt;#include &lt;stdlib.h&gt;#define MAX_ID 20#define MAX_NAME 10typedef struct student&#123;char id[MAX_ID];char name[MAX_NAME];int ChineseScore;int MathScore;int EnglishScore;int sum;&#125;student;enum Option&#123;EXIT,ByName,ById,ByScore&#125;;extern void StuInit(student **stu, int n);extern void StuDestory(student *stu);extern void StuScanf(student **stu, int n);extern void QsortByName(student **stu, int n);extern void Print(student **stu, int n);extern void QsortById(student **stu, int n);extern void QsortByScore(student **stu, int n);#endif stu.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &quot;stu.h&quot;void StuInit(student **stu, int n)&#123;if (NULL == stu)&#123; perror(&quot;StuInit()\\n&quot;); exit(-1);&#125;student *tmp = (student*)malloc(sizeof(student)*n);if (NULL == tmp)&#123; perror(&quot;malloc()\\n&quot;); exit(-1);&#125;*stu = tmp;tmp = NULL;memset(*stu, 0, sizeof(student)*n);&#125;void StuDestory(student *stu)&#123;free(stu);stu = NULL;&#125;void StuScanf(student **stu, int n)&#123;int i = 0;for (i=0; i&lt;n; i++)&#123;int sum = 0;printf(&quot;请输入姓名:&gt;&quot;);scanf(&quot;%s&quot;, (*stu)[i].name); // 二级指针变量先解引用为一级指针变量再进行操作!printf(&quot;请输入学号:&gt;&quot;);scanf(&quot;%s&quot;, (*stu)[i].id);printf(&quot;请输入语文成绩:&gt;&quot;);scanf(&quot;%d&quot;, &amp;((*stu)[i].ChineseScore));printf(&quot;请输入数学成绩:&gt;&quot;);scanf(&quot;%d&quot;, &amp;((*stu)[i].MathScore));printf(&quot;请输入英语成绩:&gt;&quot;);scanf(&quot;%d&quot;, &amp;((*stu)[i].EnglishScore));sum = ((*stu)[i].ChineseScore + (*stu)[i].MathScore + (*stu)[i].EnglishScore);(*stu)[i].sum = sum;printf(&quot;保存成功!\\n&quot;);&#125;&#125;static int SortByName(const void *e1, const void *e2)&#123;return (*(((student*)e1)-&gt;name) - *(((student*)e2)-&gt;name));&#125;void QsortByName(student **stu, int n)&#123;if (NULL == stu)&#123;perror(&quot;QsortByName()\\n&quot;);exit(-1);&#125;qsort((*stu), n, sizeof(student), SortByName);&#125;void Print(student **stu, int n)&#123;int i = 0;printf(&quot;排序完成!\\n&quot;);for (i=0; i&lt;n; i++)&#123;printf(&quot;姓名\\t学号\\t语文\\t数学\\t英语\\t总分\\t\\n&quot;);printf(&quot;%s\\t%s\\t%d\\t%d\\t%d\\t%d\\t\\n&quot;, (*stu)[i].name,\\(*stu)[i].id,\\(*stu)[i].ChineseScore,\\(*stu)[i].MathScore,\\(*stu)[i].EnglishScore,\\(*stu)[i].sum);&#125;&#125;static int SortById(const void *e1, const void *e2)&#123;return (*(((student*)e1)-&gt;id) - *(((student*)e2)-&gt;id));&#125;void QsortById(student **stu, int n)&#123;qsort((*stu), n, sizeof(student), SortById);&#125;static int SortByScore(const void *e1, const void *e2)&#123;//return ((*((student*)e1)).sum - (*((student*)e2)).sum);return ((((student*)e1)-&gt;sum) - (((student*)e2)-&gt;sum));&#125;void QsortByScore(student **stu, int n)&#123;qsort((*stu), n, sizeof(student), SortByScore);&#125; test.c 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// qsort((*stu))传入给compare的是*stu// 运算符优先级第一梯队：() [] -&gt;// 运算符优先级第二梯队: *#include &quot;stu.h&quot;static void Menu(void)&#123;printf(&quot;请选择要排序的方式:&gt;\\n&quot;);printf(&quot;********1.按姓名排序********\\n&quot;);printf(&quot;********2.按学号排序********\\n&quot;);printf(&quot;******* 3.按总成绩排序 *****\\n&quot;);printf(&quot;******** 0.退出 *******\\n&quot;);&#125;int main()&#123;int input = 0;int n = 0;printf(&quot;请输入要输入的学生的个数:&gt;&quot;);scanf(&quot;%d&quot;, &amp;n);student *stu;StuInit(&amp;stu, n);StuScanf(&amp;stu, n);do&#123;Menu();scanf(&quot;%d&quot;, &amp;input);switch(input)&#123; case EXIT: StuDestory(stu); printf(&quot;退出成功!\\n&quot;); break; case ByName: QsortByName(&amp;stu, n); Print(&amp;stu, n); break; case ById: QsortById(&amp;stu, n); Print(&amp;stu, n); break; case ByScore: QsortByScore(&amp;stu, n); Print(&amp;stu, n); break; default: printf(&quot;输入有误,请重新输入!\\n&quot;); break;&#125;&#125;while(input);system(&quot;pause&quot;);return 0;&#125; 三.qsort()函数模拟实现，但，是冒泡排序算法（BubbleSort算法实现通用排序函数） 函数设计 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;windows.h&gt;#define MAX_NAME 10int ComparInt(const void *e1, const void *e2)&#123; return ( *((int*)e1) - *((int*)e2) );&#125;void Swap(void *buf1, void *buf2, int isize)&#123; int i = 0; for (i=0; i&lt;isize; i++) // 逐字节交换 &#123; char tmp = 0; tmp = *(char*)buf1; *(char*)buf1 = *(char*)buf2; *(char*)buf2 = tmp; buf1++; buf2++; &#125;&#125;void BubbleSort(void *array, size_t len, size_t isize, int (*compar)(const void *e1, const void *e2))&#123; int i = 0; int j = 0; for (i=0; i&lt;len-1; i++) // len个元素要比较len-1轮 &#123; for (j=0; j&lt;len-1-i; j++) // 每轮比较完成后需要比较的元素个数-1 &#123; if ( compar( ((char*)array) + j*isize, ((char*)array) + (j+1)*isize ) &gt; 0 ) &#123; // 如果首元素大于后一个元素就进入Swap函数进行交换 Swap( ((char*)array) + j*isize, ((char*)array) + (j+1)*isize, isize ); &#125; &#125; &#125;&#125;void TestInt(void)&#123; int i = 0; int arr[] = &#123;1, 3, 5, 7, 9, 2, 4, 6, 8, 10&#125;; int sz = 0; sz = sizeof(arr) / sizeof(arr[0]); printf(&quot;排序前:&gt;&quot;); for (i=0; i&lt;sz; i++) &#123; printf(&quot;%d &quot;, arr[i]); &#125; BubbleSort(arr, sz, sizeof(arr[0]), ComparInt); printf(&quot;\\n排序后:&gt;&quot;); for (i=0; i&lt;sz; i++) &#123; printf(&quot;%d &quot;, arr[i]); &#125; printf(&quot;\\n&quot;);&#125;typedef struct student&#123; char name[MAX_NAME]; int id;&#125;student;int ComparById(const void *e1, const void *e2)&#123; return ( ((student*)e1)-&gt;id, ((student*)e2)-&gt;id );&#125;int ComparByName(const void *e1, const void *e2)&#123; return strcmp( ((student*)e1)-&gt;name, ((student*)e2)-&gt;name );&#125;void TestStruct1(void)&#123; int i = 0; student stu[] = &#123;&#123;&quot;bb&quot;, 01&#125;, &#123;&quot;aa&quot;, 02&#125;&#125;; int len = sizeof(stu) / sizeof(stu[0]); printf(&quot;按姓名排序前:&gt;\\n&quot;); printf(&quot;姓名\\t学号\\t\\n&quot;); for (i=0; i&lt;len; i++) &#123; printf(&quot;%s\\t%d\\t\\n&quot;, stu[i].name, stu[i].id); &#125; BubbleSort(stu, len, sizeof(student), ComparByName); printf(&quot;按姓名排序后:&gt;\\n&quot;); printf(&quot;姓名\\t学号\\t\\n&quot;); for (i=0; i&lt;len; i++) &#123; printf(&quot;%s\\t%d\\t\\n&quot;, stu[i].name, stu[i].id); &#125; printf(&quot;\\n&quot;); &#125;void TestStruct2(void)&#123; int i = 0; student stu[] = &#123;&#123;&quot;bb&quot;, 01&#125;, &#123;&quot;aa&quot;, 02&#125;&#125;; int len = sizeof(stu) / sizeof(stu[0]); printf(&quot;按学号排序前:&gt;\\n&quot;); printf(&quot;姓名\\t学号\\t\\n&quot;); for (i=0; i&lt;len; i++) &#123; printf(&quot;%s\\t%d\\t\\n&quot;, stu[i].name, stu[i].id); &#125; BubbleSort(stu, len, sizeof(student), ComparById); printf(&quot;按学号排序后:&gt;\\n&quot;); printf(&quot;姓名\\t学号\\t\\n&quot;); for (i=0; i&lt;len; i++) &#123; printf(&quot;%s\\t%d\\t\\n&quot;, stu[i].name, stu[i].id); &#125; printf(&quot;\\n&quot;);&#125;int main()&#123; TestInt(); TestStruct1(); TestStruct2(); system(&quot;pause&quot;); return 0;&#125; 四.参考来源 📕C语言qsort（快速排序）（用冒泡排序的排序方式自主实现一个通用的快速排序的函数）_你需要实现 个类似 qsort() 函数的快速排序函数 qsort_with_skip() , 持对_KOBE 0824 BRYANT的博客-CSDN博客 C语言qsort()函数针对：整型、单个字符、字符串、结构体，超详细讲解（多维度分析举例，小白一看就懂！！！！！）_sunny-ll的博客-CSDN博客_qsort 字符串","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"}]},{"title":"VSCode使用配置","slug":"VSCode使用配置","date":"2022-12-16T15:38:54.000Z","updated":"2022-12-16T16:03:40.000Z","comments":true,"path":"2022/12/16/VSCode使用配置/","link":"","permalink":"http://example.com/2022/12/16/VSCode%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/","excerpt":"","text":"配置自定义背景颜色 ctrl + shift + p -&gt; user settings.json 粘贴 &#x2F;&#x2F; A code block{ “editor.fontSize”: 16, “editor.mouseWheelZoom”: true, “editor.tabSize”: 2, “workbench.colorCustomizations”: { &#x2F;&#x2F; 写在 Atom One Light 里面则只对该主题有效 “[Atom One Light]”: { “editor.background”: “#c5f3cb”, “sideBar.background”: “#d9f1d1”, “activityBar.background”: “#ddeedd”, &#x2F;&#x2F; 终端前景背景色 “terminal.foreground” : “#141416”, “terminal.background” : “#a0ecd9” }, “editorLineNumber.foreground”: “#f19012”, }, “workbench.statusBar.feedback.visible”: false, “workbench.colorTheme”: “Atom One Light”,} 参考 vscode自定义主题颜色 - CodeAntenna","categories":[],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"http://example.com/tags/VSCode/"}]},{"title":"Ubuntu下安装Virtual box","slug":"Ubuntu下安装Virtual-box","date":"2022-12-07T13:10:14.000Z","updated":"2022-12-07T13:48:09.000Z","comments":true,"path":"2022/12/07/Ubuntu下安装Virtual-box/","link":"","permalink":"http://example.com/2022/12/07/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85Virtual-box/","excerpt":"","text":"Ubuntu下安装Virtual box # 1.下载Virtual box ![01](https://pic1.imgdb.cn/item/63909049b1fccdcd368d4a1b.png) ![02](https://pic1.imgdb.cn/item/63909049b1fccdcd368d4a1b.png) 2.安装Virtual box 3.打开Virtual box 4.安装拓展 成功","categories":[],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/tags/Ubuntu/"},{"name":"Virtual box","slug":"Virtual-box","permalink":"http://example.com/tags/Virtual-box/"}]},{"title":"小米路由器mini","slug":"小米路由器mini","date":"2022-12-07T01:36:41.000Z","updated":"2022-12-07T02:20:28.000Z","comments":true,"path":"2022/12/07/小米路由器mini/","link":"","permalink":"http://example.com/2022/12/07/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8mini/","excerpt":"","text":"小米路由器后台地址 192.168.31.1 路由器刷机及开启ssh对路由器进行数据备份升级ROM为开发版MiWiFi – 下载 下载ssh工具包MiWiFi – 开放平台改版 路由器刷入ssh工具包参考资料 怎么连接小米路由器ssh(路由器怎么开启ssh) 路由器 【路由刷机教程】适用于带USB的小米路由 MiWiFi – 小米路由器官网","categories":[],"tags":[]},{"title":"Ubuntu源代码安装Apache2、PHP、MySQL、PHPMyAdmin","slug":"Ubuntu源代码安装Apache2、PHP、MySQL、PHPMyAdmin","date":"2022-12-03T13:23:52.000Z","updated":"2022-12-07T13:46:40.000Z","comments":true,"path":"2022/12/03/Ubuntu源代码安装Apache2、PHP、MySQL、PHPMyAdmin/","link":"","permalink":"http://example.com/2022/12/03/Ubuntu%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%89%E8%A3%85Apache2%E3%80%81PHP%E3%80%81MySQL%E3%80%81PHPMyAdmin/","excerpt":"","text":"Ubuntu源代码安装Apache2、PHP、MySQL # 安装Apache2 1.安装apr 1$ sudo apt install libapr1-dev 2.安装apr-util 1$ sudo apt install libaprutil1-dev 3.安装pcre 1$ sudo apt install libpcre2-dev 4.安装make 1$ sudo apt install make 5.安装apache2 1$ tar zxvf httpd-2.4.54.tar.gz 1$ cd httpd-2.4.54 1$ sudo ./configure --prefix=/usr/local/apache2 1$ sudo make 1$ sudo make install 修改 apache2 的端口1$ sudo vi /usr/local/apache2/conf/httpd.conf Listen 8080 运行和停止 apache2 运行1$ sudo /usr/local/apache2/bin/apachectl start 停止1$ sudo /usr/local/apache2/bin/apachectl stop 安装PHP1.安装pkg-config 1$ sudo apt install pkg-config 2.安装libxml-2.0 12$ sudo apt install libxml2$ sudo apt install libxml2-dev 3.安装sqlite3 1$ sudo apt install libsqlite3-dev 4.安装zlib 1$ sudo apt install zlib1g-dev 5.安装PHP 1$ tar -zxvf php-8.1.13.tar.gz 1$ cd php-8.1.13 1$ sudo ./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-pdo-mysql 1$ sudo make 1$ sudo make install 安装MySQL1.安装cmake 1$ sudo apt install cmake 2.安装bison 1$ sudo apt install bison 3.安装libncurses5-dev 1$ sudo apt install libncurses5-dev 4.安装libssl-dev 1$ sudo apt install libssl-dev 5.安装MySQL 1$ tar -zxvf mysql-boost-8.0.31.tar.gz 1$ cd mysql-8.0.31 1$ sudo cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DWITH_BOOST=boost -DFORCE_INSOURCE_BUILD=ON 1$ sudo make 1$ sudo make install 6.添加用户 1234$ groupadd mysql$ useradd -g mysql mysql$ mkdir -p /usr/local/mysql/data$ chown -R mysql:mysql /usr/local/mysql 7.初始化 1$ sudo /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data 这一步会打印输出随机生成的root账号初始密码，如图： 8.配置 配置my.cnfvim &#x2F;etc&#x2F;my.cnf,然后写入以下内容 [client]socket &#x3D; &#x2F;tmp&#x2F;mysql.sock[mysqld]socket &#x3D; &#x2F;tmp&#x2F;mysql.sockbasedir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysqldatadir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data 配置服务项1234$ sudo cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld$ sudo chmod +x /etc/init.d/mysqld $ update-rc.d mysqld defaults$ service mysqld start 添加环境变量1sudo vi /etc/profile.d/myprofile 最后一行添加 12MySQL PATHexport PATH=/usr/local/mysql/bin:$PATH 生效 1$ source /etc/profile 9.连接数据库 1$ cd/usr/local/mysql/bin 1$ ./mysql –u root–p 10.修改MySQL的root用户密码 格式：mysqladmin -u用户名 -p旧密码 password 新密码例子：mysqladmin -uroot -p8,wLpiiG\\S-f password 123456注:如密码有）等，需用\\转意","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/categories/Ubuntu/"}],"tags":[{"name":"Apache2","slug":"Apache2","permalink":"http://example.com/tags/Apache2/"},{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"http://example.com/tags/MySQL/"},{"name":"PHPMyAdmin","slug":"PHPMyAdmin","permalink":"http://example.com/tags/PHPMyAdmin/"}]},{"title":"Ubuntu22.04下使用wine安装微信","slug":"Ubuntu22.04下使用wine安装微信","date":"2022-12-01T08:28:39.000Z","updated":"2022-12-07T13:48:34.000Z","comments":true,"path":"2022/12/01/Ubuntu22.04下使用wine安装微信/","link":"","permalink":"http://example.com/2022/12/01/Ubuntu22.04%E4%B8%8B%E4%BD%BF%E7%94%A8wine%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1/","excerpt":"","text":"Ubuntu22.04下使用wine安装微信 # 1.安装Wine初始化Wine > 安装 1$ sudo apt install wine 1$ wine --version # 检验是否成功安装 --- > 初始化wine，安装以后必须初始化wine，在你的home目录中生成对应的隐藏.wine文件夹 1$ wine cmd # 进入到cmd以后就可以正常退出了 --- # 2.安装winetricks并配置 > 安装 1$ sudo apt install winetricks > 配置 由于获取配置的文件在国外的服务器上所以需要魔法上网（SS需要提前开启全局代理模式） 添加当前终端代理 export http_proxy&#x3D;http://proxyAddress:port export https_proxy&#x3D;http://proxyAddress:port 检测代理是否成功 1$ curl cip.cc 开始配置 1$ winetricks riched20 3.安装微信 下载 微信下载 安装 1$ wine WeChatSetup.exe # 找到下载位置，在终端中安装，安装的时候要能看到路径，否则请检查上面的步骤 4.优化 微信图标 安装完毕，检查所有的应用程序中有没有微信的图标，有的话设置图标这一步可以跳过 如果没有出现应用图标，可以手动添加，在桌面会出现微信的桌面启动文件执行以下命令，把微信的桌面启动文件放入&#x2F;usr&#x2F;share&#x2F;applications文件夹内sudo mv 微信.desktop &#x2F;usr&#x2F;share&#x2F;applications&#x2F; 1sudo mv 微信.desktop /usr/share/applications/ crashpad 文件持续增加（会把电脑磁盘文件占满！！！） 根据自己电脑修改并运行以下代码 1234rm -rf /home/[username]/.wine/drive_c/users/[username]/&#x27;Application Data&#x27;/Tencent/WeChat/wmpf_app/crashpad/reports rm -rf /home/[username]/.wine/drive_c/users/[username]/&#x27;Application Data&#x27;/Tencent/WeChat/xweb/crash/Crashpad/reports touch /home/[username]/.wine/drive_c/users/[username]/&#x27;Application Data&#x27;/Tencent/WeChat/wmpf_app/crashpad/reports touch /home/[username]/.wine/drive_c/users/[username]/&#x27;Application Data&#x27;/Tencent/WeChat/xweb/crash/Crashpad/reports 直接把文件夹删除，新建同名文件，这样就不会产生文件了 无法输入用ibus输入法输入中文 自制启动脚本解决 vim wechat 1234567#!/bin/bashenv locale=zh_CNexport GTK_IM_MODULE=ibusexport QT_IM_MODULE=ibusexport XMODIFIERS=&quot;@im=ibus&quot;cd /home/hokin/.wine/drive_c/&#x27;Program Files (x86)&#x27;/Tencent/WeChatnohup wine ./WeChat.exe &amp; 授予启动脚本权限 1# chmod a+rwx wechat 启动微信 1$ ./wechat 5.成功 6.参考资料ubuntu20.04 wine 安装 wechat - 甫生 - 博客园 (23条消息) Ubuntu 20.04.2 LTS安装微信（wine）_Elias94的博客-CSDN博客_wine 微信 Ubuntu22.04 下使用wine 安装微信 - 掘金 微信输入不了中文 · Issue #243 · wszqkzqk&#x2F;deepin-wine-ubuntu · GitHub 解决ubuntu下wine qq或微信等软件无法用ibus输入法输入中文的问题_51CTO博客_wine微信不能输入","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/categories/Ubuntu/"}],"tags":[{"name":"wine","slug":"wine","permalink":"http://example.com/tags/wine/"}]},{"title":"Git笔记","slug":"Git笔记","date":"2022-11-30T10:21:42.000Z","updated":"2023-04-08T03:37:58.763Z","comments":true,"path":"2022/11/30/Git笔记/","link":"","permalink":"http://example.com/2022/11/30/Git%E7%AC%94%E8%AE%B0/","excerpt":"","text":"[toc] Git视频教程40 分钟学会 Git | 日常开发全程大放送&amp;搭配Github_哔哩哔哩_bilibili#Git文字教程相关操作1.安装git1# apt install git 2.创建一个版本库 先创建一个存放文件的文件夹1$ mkdir git 在目录中创建版本库 1$ git init 3.创建版本 先创建一个文件 创建版本12$ git add test1.c$ git commit -m &quot;第一次提交&quot; 4.查看版本信息 方法一1$ git log 方法二1$ git log --pretty=oneline 方法三1$ git log --pretty=oneline --graph 5.查看操作记录 1$ git reflog 6.回退(切换)版本 方法一1$ git reset --hard HEAD^ # ^表示回退一次版本 方法二1$ git reset --hard HEAD~100 # 回退100次版本 方法三1$ git reset --hard 版本号前几个字符 7.查看工作树1$ git status 8.撤销修改(工作区&#x2F;暂存区) 丢弃工作区的改动1$ git restore &lt;文件&gt; 丢弃暂存区的改动1$ git restore --staged &lt;文件&gt; 丢弃已提交文件的改动 使用版本回退命令 9.对比文件的不同(后面的文件比前面的文件多&#x2F;少) 方法一与HEAD进行对比1$ git diff HEAD -- &lt;文件&gt; 方法二 HEAD的&lt;文件&gt;与HEAD^的同一个文件的对比 &#96;&#96;&#96;bash$ git diff HEAD HEAD^ – &lt;文件&gt;123## 10.删除文件```bash$ rm &lt;文件&gt; 11.查看分支数及当前所在分支1$ git branch 12.创建新分支1$ git branch &lt;name&gt; 13.创建并切换至新分支1$ git checkout -b dev # development 14.切换回master分支1$ git checkout master 15.分支合并 Fast-forward(快速模式)1$ git merge dev 禁用快速摸索1$ git merge --no-ff -m &quot;禁用fast-forward合并&quot; dev 16.删除分支1$ git branch -d dev 17.冻结工作区1$ git stash 18.查看冻结的工作区1$ git stash list 19.解冻工作区1$ git stash pop 20.文件重命名1$ git mv xx xx Git相关知识1.工作区和暂存区 2.冲突 在不同分支上都对同一个文件进行了修改并且都commit了，那么在合并分支的时候就会发生冲突，需要手动去调整冲突的内容后，add-&gt;commit 3.常用分支 dev分支(development) master分支(主分支) bug分支(修复每一个bug都在master分支上新建一个bug分支,并且采用–no-ff -m “bug-01”提交方式) Github相关知识1..添加ssh账号 修改.gitconfig文件 Linux&#x2F;MacOS 1$ vi /home/usr/.gitconfig Windows 1C:\\Users\\HoKin\\ 输入以下内容 [user] name &#x3D; hokin email &#x3D; &#104;&#x6f;&#x6b;&#105;&#x6e;&#x2e;&#116;&#x68;&#x69;&#110;&#x6b;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d; 配置密钥信息 123ssh-keygen -t rsa -C &quot;邮箱&quot; // 生成ssh密钥,过程中然后回车三连就行git config --global user.name &quot;英文名字&quot;git config --global user.email &quot;邮箱&quot; 查看ssh密钥 1$ cat /home/usr/.ssh/id_rsa.pub 随后前往Github或者Gitee添加SSH即可 2.克隆项目1$ git clone ssh协议链接 克隆出错12$ eval &quot;$(ssh-agent -s)&quot;$ ssh-add 3.上传分支1$ git push origin BranchName 4.本地分支跟踪服务器分支1$ git branch --set-upstream-to=origin/远程分支名称 本地分支名称 5.从远程分区上拉取代码1$ git pull origin BranchName 6.设置git同时推送gitee和github远程仓库 进入 .git 目录下，打开 config 文件 1$ vi config 只需在 [remote “origin”] 添加需要推送的其他git地址，例如github 或自己的 gitlab即可 [core] repositoryformatversion &#x3D; 0 filemode &#x3D; true bare &#x3D; false logallrefupdates &#x3D; true[remote “origin”] # github仓库地址 url &#x3D; &#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;:iuhokin&#x2F;C.git # gitee仓库地址 url &#x3D; https://gitee.com/hokin456/code_c # 注：最好填入ssh地址，并在相应的平台上配置好ssh密钥，否则每次push都要输入账号密码 fetch &#x3D; +refs&#x2F;heads&#x2F;:refs&#x2F;remotes&#x2F;origin&#x2F;[branch “main”] remote &#x3D; origin merge &#x3D; refs&#x2F;heads&#x2F;main[advice] addIgnoredFile &#x3D; false 特殊的查找资源小技巧-常用前缀后缀 找百科大全 awesome xxx 找例子 xxx sample 找空项目架子 xxx starter &#x2F; xxx boilerplate 找教程 xxx tutorial","categories":[{"name":"自学笔记","slug":"自学笔记","permalink":"http://example.com/categories/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"}]},{"title":"从Windows迁移hexo到Ubuntu","slug":"从Windows迁移hexo到Ubuntu","date":"2022-11-30T09:14:45.000Z","updated":"2022-11-30T09:14:45.000Z","comments":true,"path":"2022/11/30/从Windows迁移hexo到Ubuntu/","link":"","permalink":"http://example.com/2022/11/30/%E4%BB%8EWindows%E8%BF%81%E7%A7%BBhexo%E5%88%B0Ubuntu/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"毕业歌","slug":"毕业歌","date":"2022-11-30T08:53:56.000Z","updated":"2023-02-17T12:26:35.731Z","comments":true,"path":"2022/11/30/毕业歌/","link":"","permalink":"http://example.com/2022/11/30/%E6%AF%95%E4%B8%9A%E6%AD%8C/","excerpt":"","text":"同学们，大家起来，担负起天下的兴亡！听吧，满耳是大众的嗟伤！看吧，一年年国土的沦丧！我们是要选择“战”还是“降”？我们要做主人去拼死在疆场，我们不愿做奴隶而青云直上！我们今天是桃李芬芳，明天是社会的栋梁；我们今天弦歌在一堂，明天要掀起民族自救的巨浪！巨浪，巨浪，不断地增长！同学们！同学们！快拿出力量，担负起天下的兴亡！巨浪，巨浪，不断地增长！同学们！同学们！快拿出力量，担负起天下的兴亡！","categories":[{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[]},{"title":"Molly","slug":"Molly","date":"2022-11-20T13:53:52.000Z","updated":"2022-11-20T13:56:35.000Z","comments":true,"path":"2022/11/20/Molly/","link":"","permalink":"http://example.com/2022/11/20/Molly/","excerpt":"","text":"刚出浴的Molly","categories":[{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"Molly","slug":"Molly","permalink":"http://example.com/tags/Molly/"}]},{"title":"Windows快捷键","slug":"Windows快捷键","date":"2022-11-20T09:11:06.000Z","updated":"2022-11-22T04:58:53.000Z","comments":true,"path":"2022/11/20/Windows快捷键/","link":"","permalink":"http://example.com/2022/11/20/Windows%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"返回桌面 Win + D，返回桌面后再按Win + D即可重新返回页面 打开文件资源管理器 Win + E 打开设置 Win + I 切换页面 Alt + Tab 切换繁&#x2F;简输入 Ctrl + Shift + F","categories":[{"name":"快捷键","slug":"快捷键","permalink":"http://example.com/categories/%E5%BF%AB%E6%8D%B7%E9%94%AE/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://example.com/tags/Windows/"}]},{"title":"制作PE启动盘","slug":"制作PE启动盘","date":"2022-11-19T12:06:31.000Z","updated":"2022-11-19T12:14:03.000Z","comments":true,"path":"2022/11/19/制作PE启动盘/","link":"","permalink":"http://example.com/2022/11/19/%E5%88%B6%E4%BD%9CPE%E5%90%AF%E5%8A%A8%E7%9B%98/","excerpt":"","text":"下载ventoy Ventoy 下载微PE工具箱 微PE工具箱 - 超好用的装机维护工具生成可启动ISO 把可启动ISO拉进用ventoy制作好的U盘中即可 ​ 开机选择U盘启动即可运行各种镜像文件,同时U盘也可正常放置资料文件","categories":[{"name":"PE","slug":"PE","permalink":"http://example.com/categories/PE/"}],"tags":[]},{"title":"高质量的C-C++编程笔记","slug":"高质量的C-C-编程笔记","date":"2022-11-18T02:54:33.000Z","updated":"2022-11-18T02:58:13.000Z","comments":true,"path":"2022/11/18/高质量的C-C-编程笔记/","link":"","permalink":"http://example.com/2022/11/18/%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84C-C-%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/","excerpt":"","text":"前言 在写此书前，我阅读了不少程序设计方面的英文著作，越看越羞惭。因为发现自己连编程基本技能都未能全面掌握，顶多算是二流水平，还好意思谈什么老手和高手。希望和我一样在国内土生土长的程序员朋友们能够做到：（1）知错就改；（2）经常温故而知新；（3）坚持学习，天天向上。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"问题记录","slug":"问题记录","date":"2022-11-18T00:46:34.000Z","updated":"2022-11-19T04:06:14.000Z","comments":true,"path":"2022/11/18/问题记录/","link":"","permalink":"http://example.com/2022/11/18/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/","excerpt":"","text":"windows11安装VirtualBox7，解决报错： needs the Microsoft Visual C++2019 解决方法:去Micorsoft官网下一个Microsoft Visual C++ 2019最新受支持的 Visual C++ 可再发行程序包下载 | Microsoft Learn Adobe Premiere Pro CC 缺少WMVCORE.DLL ​ 解决方法 文字教程:把下载好的.dll文件放到C:\\Windows\\System32即可视频教程:[[100% WORKING] How to fix WMVCORE.DLL file and WMASF.DLL are missing from your computer ERROR! Wind - YouTubeWMVCORE.DLL下载地址：wmvcore.dll free download | DLL‑files.com FormatFactory缺少MFPlat.DLL 解决方法同上 Pr无法打开磁盘中的文件 问题简述：往PrCC2019中导入视频文件提示无法打开磁盘中的文件 解决思路：①：以管理员模式运行PrCC2019进行导入–&gt;失败 ②：怀疑视频格式或者编码格式不支持(原视频格式mp4,编码格式h.264)，用格式工厂进行格式转换，编码转换后–&gt;失败 ③：怀疑电脑系统没有合适的解码器电脑系统如下: 在特殊地区发行的的版本N和KN版除了以上的版本外，Windows 10还特别为欧盟、瑞士提供了「N」（不带媒体播放器）版，以及韩国的「KN」版。这类版本不包含像Windows Media Player或相机这样的媒体相关功能。家用版、专业版以及企业版都有对应的N版或KN版产品。2004年在欧盟的判决下微软被要求发布不绑定Windows Media Player的Windows版本，而这个版本被微软命名为N版。N版与全功能版的售价相同，缺少的功能以「媒体功能包」的形式可以从微软官网上免费下载。–资料来源：Windows 10版本列表- 维基百科，自由的百科全书 正式解决 ①:下载相应得媒体功能包后重启电脑(注意: 系统不会提示你重启计算机，但必须重启才能成功完成媒体功能包的安装。) 注意必须要重启,请勿关机后开机,详见中科院物理所的科普:重启就是关机再开机？你以为错了…… Windows 10&#x2F;11 N (2022 年 9 月媒体功能包) - Microsoft 支持其他问题:win10无法顺利安装medai feature pack - Microsoft Community 下载相应的媒体功能包以及在MicrosoftStore下载电影和电视,Windows媒体播放器后问题成功解决","categories":[{"name":"问题记录","slug":"问题记录","permalink":"http://example.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Virtual Box","slug":"Virtual-Box","permalink":"http://example.com/tags/Virtual-Box/"},{"name":"Premiere Pro CC 2019","slug":"Premiere-Pro-CC-2019","permalink":"http://example.com/tags/Premiere-Pro-CC-2019/"}]},{"title":"Windows安装Mysql","slug":"Windows安装Mysql","date":"2022-11-17T14:30:25.000Z","updated":"2022-11-17T14:33:28.000Z","comments":true,"path":"2022/11/17/Windows安装Mysql/","link":"","permalink":"http://example.com/2022/11/17/Windows%E5%AE%89%E8%A3%85Mysql/","excerpt":"","text":"参考视频:(全网最详细)Mysql下载安装和配置方法(看了必成功)_哔哩哔哩_bilibili 注意:最新版本的mysql并不需要像视频当中创建init.int文件，我安装的是8.0.31版本(该版本无需创建init.ini文件) mysql下载网址:MySQL :: Download MySQL Community Server 相关命令：进入命令指示符（管理员模式）,输入mysqld –initialize-insecure –user&#x3D;mysql,初始化数据库，并设置默认用户名为root,密码为空，初始化完成后，在mysql根目录中会自动生成data文件再输入mysqld -install,为windows安装mysql服务，默认服务名为mysql出现service successfully installed.表示配置完成启动数据库net start mysql,输入mysql -u root -p ,不用输入密码直接回车出现mysql&gt;配置完成输入(alter user user() identified by “密码”;)去配置密码mysql退出 mysql&gt;quit;输入net stop mysql关闭数据库","categories":[{"name":"Windows","slug":"Windows","permalink":"http://example.com/categories/Windows/"},{"name":"Mysql","slug":"Windows/Mysql","permalink":"http://example.com/categories/Windows/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"}]},{"title":"path的相关知识","slug":"path的相关知识","date":"2022-11-17T14:27:24.000Z","updated":"2022-11-17T14:30:04.000Z","comments":true,"path":"2022/11/17/path的相关知识/","link":"","permalink":"http://example.com/2022/11/17/path%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/","excerpt":"","text":"path是路径的意思，path环境变量中存放的值，就是一连串的路径。不同的路径之间，用英文的分号间隔开 环境变量 path 的基本作用就是：当一个可执行程序是存放在 path 中所设置的子目录时，那么在运行(Win+R)该程序时，就不需要输入完整的子目录名称，只要直接输入可执行程序名即可(e.g:Win+R后输入cmd&#x2F;notepad)；如果该可执行程序不是放在 path 中所设置的子目录时，那么在运行该程序时，就必须要输入该可执行程序的完整路径才行 注意：（windows环境变量的查找顺序是按照文件的录入顺序从前往后寻找的，最前面一条的优先级最高，如果找到命令就不会再向后找了），所以当运行path中的程序出现莫名奇妙的错误时，注意一下path中的顺序看看是是否有其他的路径造成冲突 ​ Win10中默认的系统高级设置中的配置","categories":[{"name":"Windows","slug":"Windows","permalink":"http://example.com/categories/Windows/"}],"tags":[{"name":"path","slug":"path","permalink":"http://example.com/tags/path/"}]},{"title":"Windows下配置VSCode中的C语言环境","slug":"Windows下配置VSCode中的C语言环境","date":"2022-11-17T14:24:17.000Z","updated":"2022-11-17T14:27:05.000Z","comments":true,"path":"2022/11/17/Windows下配置VSCode中的C语言环境/","link":"","permalink":"http://example.com/2022/11/17/Windows%E4%B8%8B%E9%85%8D%E7%BD%AEVSCode%E4%B8%AD%E7%9A%84C%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/","excerpt":"","text":"参考视频:【教程】VScode中配置C语言&#x2F;C++运行环境_哔哩哔哩_bilibili ps.C&#x2F;C++版本不能太新，v1.8.2版本可自动生成完整的lauch.json文件 附我的.vscode文件夹下的代码文件 lauch.json文件 1234567891011121314151617181920212223242526272829303132333435&#123; // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ &#123; &quot;name&quot;: &quot;gcc.exe - 生成和调试活动文件&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\\\bin\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;, &quot;args&quot;: [], &quot;stopAtEntry&quot;: false, &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: true, &quot;MIMode&quot;: &quot;gdb&quot;, &quot;miDebuggerPath&quot;: &quot;D:\\\\RunEnvironment\\\\x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe&quot;, &quot;setupCommands&quot;: [ &#123; &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true &#125;, &#123; &quot;description&quot;: &quot;将反汇编风格设置为 Intel&quot;, &quot;text&quot;: &quot;-gdb-set disassembly-flavor intel&quot;, &quot;ignoreFailures&quot;: true &#125; ], &quot;preLaunchTask&quot;: &quot;C/C++: gcc.exe 生成活动文件&quot; &#125; ]&#125; tasks.json文件 123456789101112131415161718192021222324252627282930&#123; ``&quot;tasks&quot;``: [ ``&#123; ``&quot;type&quot;``: ``&quot;cppbuild&quot;``, ``&quot;label&quot;``: ``&quot;C/C++: gcc.exe 生成活动文件&quot;``, ``&quot;command&quot;``: ``&quot;D:\\\\RunEnvironment\\\\x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe&quot;``, ``&quot;args&quot;``: [ ``&quot;-fdiagnostics-color=always&quot;``, ``&quot;-g&quot;``,``//-g参数所生成的可执行文件为Debug版本，-o2参数所生成的可执行文件为Release版本 ``&quot;$&#123;file&#125;&quot;``, ``//&quot;$&#123;fileDirname&#125;\\\\*.c&quot;,// 多文件编译,开启这一条，在目录创建一个bin文件夹，屏蔽上一条&quot;$&#123;file&#125;&quot; ``&quot;-o&quot;``, ``&quot;$&#123;fileDirname&#125;\\\\bin\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;``, ``&quot;-fexec-charset=GBK&quot; ``], ``&quot;options&quot;``: &#123; ``&quot;cwd&quot;``: ``&quot;$&#123;fileDirname&#125;&quot; ``&#125;, ``&quot;problemMatcher&quot;``: [ ``&quot;$gcc&quot; ``], ``&quot;group&quot;``: &#123; ``&quot;kind&quot;``: ``&quot;build&quot;``, ``&quot;isDefault&quot;``: ``true ``&#125;, ``&quot;detail&quot;``: ``&quot;调试器生成的任务。&quot; ``&#125; ``], ``&quot;version&quot;``: ``&quot;2.0.0&quot;&#125; c_cpp_properties.json 1234567891011121314151617181920&#123; &quot;configurations&quot;: [ &#123; &quot;name&quot;: &quot;Win32&quot;, &quot;includePath&quot;: [ &quot;$&#123;workspaceFolder&#125;/**&quot; ], &quot;defines&quot;: [ &quot;_DEBUG&quot;, &quot;UNICODE&quot;, &quot;_UNICODE&quot; ], &quot;cStandard&quot;: &quot;c17&quot;, &quot;cppStandard&quot;: &quot;c++17&quot;, &quot;intelliSenseMode&quot;: &quot;gcc-x64&quot;, &quot;compilerPath&quot;: &quot;D:\\\\RunEnvironment\\\\x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe&quot; &#125; ], &quot;version&quot;: 4&#125; 目录安排","categories":[{"name":"VSCode","slug":"VSCode","permalink":"http://example.com/categories/VSCode/"},{"name":"Windows","slug":"VSCode/Windows","permalink":"http://example.com/categories/VSCode/Windows/"}],"tags":[{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"Linux(ubuntu)下配置VSCode中的C语言环境","slug":"Linux-ubuntu-下配置VSCode中的C语言环境","date":"2022-11-17T14:19:44.000Z","updated":"2022-11-17T14:23:53.000Z","comments":true,"path":"2022/11/17/Linux-ubuntu-下配置VSCode中的C语言环境/","link":"","permalink":"http://example.com/2022/11/17/Linux-ubuntu-%E4%B8%8B%E9%85%8D%E7%BD%AEVSCode%E4%B8%AD%E7%9A%84C%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/","excerpt":"","text":"参考视频：Visual Studio Code for C&#x2F;C++ on Linux (2021) - YouTube ps.C&#x2F;C++版本不能太新，v1.8.2版本可自动生成完整的lauch.json文件 附我的.vscode文件夹下的代码文件 lauch.json文件 12345678910111213141516171819202122232425262728293031&#123; &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ &#123; &quot;name&quot;: &quot;(gdb) 启动&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;$&#123;fileDirname&#125;/bin/$&#123;fileBasenameNoExtension&#125;&quot;, // 把生成的.exe文件放在bin文件夹下，C文件所在的位置需有一个命名为bin的文件夹 &quot;args&quot;: [], &quot;stopAtEntry&quot;: false, &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: true,// 打开外部terminal &quot;MIMode&quot;: &quot;gdb&quot;, &quot;setupCommands&quot;: [ &#123; &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true &#125;, &#123; &quot;description&quot;: &quot;将反汇编风格设置为 Intel&quot;, &quot;text&quot;: &quot;-gdb-set disassembly-flavor intel&quot;, &quot;ignoreFailures&quot;: true &#125; ], &quot;preLaunchTask&quot;: &quot;C/C++: gcc 生成活动文件&quot; &#125; ]&#125; tasks.json文件 1234567891011121314151617181920212223242526272829&#123; &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ &#123; &quot;type&quot;: &quot;cppbuild&quot;, &quot;label&quot;: &quot;C/C++: gcc 生成活动文件&quot;, &quot;command&quot;: &quot;/usr/bin/gcc&quot;, &quot;args&quot;: [ &quot;-fdiagnostics-color=always&quot;, &quot;-g&quot;, &quot;$&#123;file&#125;&quot;, //&quot;example.c&quot;,//多文件编译的时候才需要 &quot;-o&quot;, &quot;$&#123;fileDirname&#125;/bin/$&#123;fileBasenameNoExtension&#125;&quot; ], &quot;options&quot;: &#123; &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot; &#125;, &quot;problemMatcher&quot;: [ &quot;$gcc&quot; ], &quot;group&quot;: &#123; &quot;isDefault&quot;: true, &quot;kind&quot;: &quot;build&quot; &#125;, &quot;detail&quot;: &quot;编译器: /usr/bin/gcc&quot; &#125; ]&#125; 目录安排","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/categories/Ubuntu/"},{"name":"VSCode","slug":"Ubuntu/VSCode","permalink":"http://example.com/categories/Ubuntu/VSCode/"}],"tags":[{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"PiP相关知识","slug":"PiP相关知识","date":"2022-11-17T14:08:16.000Z","updated":"2023-03-30T11:05:45.654Z","comments":true,"path":"2022/11/17/PiP相关知识/","link":"","permalink":"http://example.com/2022/11/17/PiP%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/","excerpt":"","text":"配置pip下载源Linux&#x2F;Mac os123$ mkdir ~/.pip$ touch ~/.pip/pip.conf$ vim ~/.pip/pip.conf // Vim修改配置文件： 修改配置文件为： 1234[global]index-url = http://pypi.douban.com/simple[install]trusted-host = http://pypi.douban.com --trusted-host pypi.douban.com Windows 进入C:\\Users&#x2F;user 新建一个名为pip的文件夹 进入pip文件夹，创建一个新的pip.txt文件 打开pip.txt文件，粘贴以下代码后把pip.txt改成pip.ini即可 [global]index-url &#x3D; http://pypi.douban.com/simple[install]trusted-host &#x3D; http://pypi.douban.com –trusted-host pypi.douban.com 查看当前下载源12pip config listpip3 config list 查看Python已安装模块1查看Python已安装模块 参考PiP下载源 清华大学源：https://pypi.tuna.tsinghua.edu.cn/simple 阿里云：http://mirrors.aliyun.com/pypi/simple/ 豆瓣：http://pypi.douban.com/simple/ 中国科学技术大学：http://pypi.mirrors.ustc.edu.cn/simple/ 华中科技大学：http://pypi.hustunique.com/ 问题解决 bash: pip: 未找到命令… 这个错误提示通常表示您在尝试使用pip命令，但是系统无法找到该命令。这可能是因为pip没有被正确安装，或者路径没有被正确配置。 如果您已经安装了pip但仍然遇到此错误，请尝试将pip的路径添加到系统环境变量中。在Linux或macOS系统中，您可以在终端中运行以下命令： 1export PATH=$PATH:/path/to/pip 将&#x2F;path&#x2F;to&#x2F;pip替换为pip的安装路径。 如果您尚未安装pip，您可以通过以下命令在Linux或macOS系统中安装它： 1sudo easy_install pip 如果您使用的是Windows操作系统，可以尝试从Python官网下载并重新安装Python，它通常包括pip。在安装时，请确保选择“Add Python to PATH”选项，这将自动将pip添加到系统环境变量中。 执行 sudo easy_install pip报错 如果您在执行sudo easy_install pip命令时遇到错误，可能是因为easy_install未被正确安装或配置。在最新版本的Python中，已经不再默认安装easy_install。相反，建议使用pip安装Python软件包。 如果您的系统上已经安装了Python3，您可以尝试使用以下命令安装pip： 12curl https://bootstrap.pypa.io/get-pip.py -o get-pip.pysudo python get-pip.py 如果你是Python2请使用以下命令安装pip: 12curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.pysudo python get-pip.py 这将下载get-pip.py脚本并使用Python运行它来安装pip。 如果您想使用easy_install安装pip，您需要先安装setuptools。在Linux或macOS系统中，您可以使用以下命令安装setuptools： 1sudo apt-get install python-setuptools 然后，您可以使用以下命令安装pip： 1sudo easy_install pip 请注意，这种方法不是最佳选择，因为easy_install已经被pip替代了，使用pip能够更好地管理Python软件包。","categories":[{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"}],"tags":[{"name":"PiP","slug":"PiP","permalink":"http://example.com/tags/PiP/"}]},{"title":"VSCode配置Python虚拟环境","slug":"VSCode配置Python虚拟环境","date":"2022-11-17T13:53:48.000Z","updated":"2022-11-17T14:07:13.000Z","comments":true,"path":"2022/11/17/VSCode配置Python虚拟环境/","link":"","permalink":"http://example.com/2022/11/17/VSCode%E9%85%8D%E7%BD%AEPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","excerpt":"","text":"步骤 打开VSCode并在当前文件夹新建终端并输入以下命令： 1python -m venv venv 以管理员身份打开”powershell”，并执行 1set-executionpolicy remotesigned 提示是否更改执行策略时，输入“y”并回车,退出”powershell” VSCode的终端中输入 1cd venv/Scripts # 转移到Scripts文件夹中 再在VSCode的终端中输入 1./activate.ps1 # 运行脚本,激活虚拟环境 出现venv代表激活成功 相关资料： VSCODE（visual studio code）配置Python虚拟环境 - 知乎vscode运行虚拟环境virtualenv时报错：\\Scripts\\Activate.ps1，因为在此系统上禁止运行脚本_Dontla的博客-CSDN博客关于执行策略 - PowerShell | Microsoft Learn","categories":[{"name":"VSCode","slug":"VSCode","permalink":"http://example.com/categories/VSCode/"}],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"http://example.com/tags/VSCode/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"ubuntu server修改安装源","slug":"ubuntu-server修改安装源","date":"2022-11-17T13:37:31.000Z","updated":"2022-12-07T13:47:17.000Z","comments":true,"path":"2022/11/17/ubuntu-server修改安装源/","link":"","permalink":"http://example.com/2022/11/17/ubuntu-server%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E6%BA%90/","excerpt":"","text":"ubuntu server修改安装源 > Ubuntu 的软件源配置文件是 /etc/apt/sources.list,修改当中的配置即可修改软件的安装源，参考网址：[查看Ubuntu的版本号，并添加国内镜像源_快乐的飞起的博客-CSDN博客](https://blog.csdn.net/qq_43048316/article/details/111243217) 第一步 可以先备份一下配置镜像的源文件1# mv /etc/apt/sources.list /etc/apt/sources.list.backup 第二步 修改软件源配置文件1# vim /etc/apt/sources.list 把红色字体的改成你自己选用的安装源然后:wq(保存退出)即可,我所用的是 Index of &#x2F;ubuntu&#x2F; 兰州大学的镜像源地址,这里是ubuntu的全球镜像网站，你可以选择更好的镜像源地址","categories":[{"name":"UbuntuServer","slug":"UbuntuServer","permalink":"http://example.com/categories/UbuntuServer/"}],"tags":[{"name":"mirror","slug":"mirror","permalink":"http://example.com/tags/mirror/"}]},{"title":"Ubuntu全球镜像网站","slug":"Ubuntu镜像网站","date":"2022-11-17T12:59:04.000Z","updated":"2022-11-18T02:46:12.000Z","comments":true,"path":"2022/11/17/Ubuntu镜像网站/","link":"","permalink":"http://example.com/2022/11/17/Ubuntu%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99/","excerpt":"","text":"Ubuntu全球镜像网站 Mirrors : Ubuntu找到中国: 选择具体的网站 回到文件夹根目录 选择Ubuntu目录 该网址即为Ubuntu的镜像地址","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/categories/Ubuntu/"}],"tags":[{"name":"Mirror","slug":"Mirror","permalink":"http://example.com/tags/Mirror/"}]},{"title":"Butterfly主题美化教程","slug":"Butterfly主题美化教程","date":"2022-11-12T14:21:23.000Z","updated":"2022-11-17T12:38:34.000Z","comments":true,"path":"2022/11/12/Butterfly主题美化教程/","link":"","permalink":"http://example.com/2022/11/12/Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B/","excerpt":"","text":"Butterfly主题美化教程本博客的成功建成，有赖网路上各位大神的教程。以下是我在博客建立以及美化过程中遇到的一些十分优秀的博客教程，感谢各位大神的教程。在此我把这些博客教程推荐给大家： 1.开发者Jerry的Butterfly的官方文档 Butterfly - A Simple and Card UI Design theme for Hexo 2.Mrhuanhao的建站教程 保姆级搭建个人博客hexo 3.Huanhao’s blog 博客搭建命令集合 | Huanhao’s blog 4.小嘉的部落格 关于我 Butterfly 主题的所有美化 | 小嘉的部落格 5.Live2D的配置 hexo博客添加Live2D小宠物_「已注销」的博客-CSDN博客Live 2D所有模型展示图 - 为敢技术 - 博客园 6.APlayer的配置 Hexo-Butterfly音乐播放器的添加 | 学习笔记 7.Social卡片彩色图标的配置 Iconfont Inject | Akilarの糖果屋♪(^∇^*)欢迎回来！糖果屋微调合集 | Akilarの糖果屋 8.公告栏两个小人 基于 Hexo 从零开始搭建个人博客（六） | 唐志远の博客 9.图床的配置 Typora+PicGo+阿里云OSS服务 - JLUVicent 10.安装淘宝的cnpm 管理器 1npm install -g cnpm --registry=http://registry.npm.taobao.org","categories":[{"name":"Butterfly","slug":"Butterfly","permalink":"http://example.com/categories/Butterfly/"}],"tags":[{"name":"美化","slug":"美化","permalink":"http://example.com/tags/%E7%BE%8E%E5%8C%96/"}]},{"title":"电脑使用小技巧","slug":"电脑使用小技巧","date":"2022-11-12T13:57:56.000Z","updated":"2022-11-18T01:03:29.000Z","comments":true,"path":"2022/11/12/电脑使用小技巧/","link":"","permalink":"http://example.com/2022/11/12/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/","excerpt":"","text":"Win10设置开机默认开启数字小键盘 cmd: regedit 依次展开”HKEY_USERS -&gt; .DEFAULT -&gt; Control Panel -&gt;Keyboard”，点击Keyboard之后在右侧窗口中找到”InitialKeyboardIndicators”项目，双击进入 将”InitialKeyboardIndicators”项目的数值数据由”2147483648”，修改为“80000002”，并点击确定按钮即可 Chrome浏览器长截图 chrome浏览器如何截长图-百度经验 卸载Microsoft Edge浏览器 视频教程:【末影人】卸载 Microsoft Edge 有多难？_哔哩哔哩_bilibili注册表:win+R:regedit 更改后即可到控制面板进行卸载 iPhone与Windows电脑互传 微信公众号教程:iPhone与Windows电脑「无损极速」互传图片、视频、文件！ps.有个缺陷，换了ip地址就要重新配置一下手机文件中的服务器地址了 测试本机网络状态12ping 127.0.0.1ping localhost 默认监听端口 http:80端口 https:443端口 ftp:21端口 sftp(secure ftp):22端口 telnet:23端口 ssh(secure shell):22端口 2^16 &#x3D; 65536(0-65535)个端口，&lt;(大于)1024的端口号要管理员权限申请 Alt + F4功能 alt+f4的功能是什么","categories":[{"name":"电脑使用技巧","slug":"电脑使用技巧","permalink":"http://example.com/categories/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"}],"tags":[]},{"title":"Vi命令","slug":"Vi命令","date":"2022-11-11T12:56:41.000Z","updated":"2022-12-07T14:33:27.000Z","comments":true,"path":"2022/11/11/Vi命令/","link":"","permalink":"http://example.com/2022/11/11/Vi%E5%91%BD%E4%BB%A4/","excerpt":"","text":"Vi命令 # 模式 command模式(ESC进入) 编辑模式(i&#x2F;a&#x2F;o进入) 命令模式命令移动光标 h、j、k、l，分别控制光标左、下、上、右移一格。 移动到光标所在行的行首 1^ 移动到光标所在行的行尾 1$ 屏幕往前移动一页 1ctrl + f 屏幕往后移动一页 1ctrl + b 前往第一行： 11G 前往最后一行： 1G 前往第N行： 1:N 行号 设定行号： 1:set number 取消行号： 1:set no number 增删改 复制代码： 1yy / x 删除代码： 1dd 粘贴代码： 1p 撤销： 1u 搜索 向下匹配： 1/ 向上匹配： 1? 保存退出 强制退出不保存： 1:q! 保存不退出: 1:w 保存并退出： 1:wq 编辑模式命令 i：在光标前插入 a：光标后插入 o：在当前行之下新开一行插入 r：替换当前字符插入","categories":[{"name":"大学课程笔记","slug":"大学课程笔记","permalink":"http://example.com/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/tags/Ubuntu/"},{"name":"Linux操作系统","slug":"Linux操作系统","permalink":"http://example.com/tags/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"vi","slug":"vi","permalink":"http://example.com/tags/vi/"}]},{"title":"Ubuntu软件命令","slug":"Ubuntu软件命令","date":"2022-11-11T11:35:55.000Z","updated":"2022-12-07T13:47:44.000Z","comments":true,"path":"2022/11/11/Ubuntu软件命令/","link":"","permalink":"http://example.com/2022/11/11/Ubuntu%E8%BD%AF%E4%BB%B6%E5%91%BD%E4%BB%A4/","excerpt":"","text":"Ubuntu软件命令 # 7-zip命令 7-zip解压： 1$ 7z x test.zip Apache2命令 启动服务： 1# service apache2 start 停止服务： 1# service apache2 stop 重启服务： 1# service apache2 restart 浏览资源文件： 1# http://localhost:port/index.html Lynx命令 上网： 1# lynx www.baidu.com Mysql Server命令连接Mysql 查看端口3306&#x2F;33060有没有开启： 1# ss -tln 管理员连接Mysql： 1# mysql 普通用户连接Mysql： 1$ mysql -u username -p 数据库基本命令 使用数据库： 1use databasename; 显示数据库： 1show databases; 显示表数据： 1show tables; 字段表的字段名： 1desc tablename; 按字段显示： 1select col1name,col2name,col3name from tablename; 查询字段语句 1SHOW COLUMNS FROM tablename; 退出： 1quit 创建数据库1create database databasename; 创建用户1create user uername@localhost; 配置密码1alter user uername@localhost identified with mysql_native_password by &#x27;密码&#x27;; 查看用户具体信息1select user,host,authentication_string from mysql.user; 授权用户使用数据库1grant all on databasename.* to username@localhost;","categories":[{"name":"大学课程笔记","slug":"大学课程笔记","permalink":"http://example.com/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/tags/Ubuntu/"},{"name":"Linux操作系统","slug":"Linux操作系统","permalink":"http://example.com/tags/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"命令","slug":"命令","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4/"}]},{"title":"Ubuntu推荐安装","slug":"Ubuntu推荐安装","date":"2022-11-11T07:43:03.000Z","updated":"2022-12-07T12:47:04.000Z","comments":true,"path":"2022/11/11/Ubuntu推荐安装/","link":"","permalink":"http://example.com/2022/11/11/Ubuntu%E6%8E%A8%E8%8D%90%E5%AE%89%E8%A3%85/","excerpt":"","text":"编程类APP gcc: 1# apt install gcc g++: 1# apt install g++ python3: 1# apt install python3 python2: 1# apt install python2 php: 1# apt install php 网络类APP Lynx: 1# apt install lynx Apache2: 1# apt install apache2 Nginx: 1# apt install nginx Net-tools: 1# apt install net-tools Mysql Server: 1# apt install mysql-server phpMyAdmin: 1# apt install phpmyadmin 1$ wget https://files.phpmyadmin.net/phpMyAdmin/5.2.0/phpMyAdmin-5.2.0-all-languages.zip 日用类APP 7-zip: 1# apt install p7zip-full gimp: 1# apt install gimp","categories":[{"name":"大学课程笔记","slug":"大学课程笔记","permalink":"http://example.com/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/tags/Ubuntu/"},{"name":"install","slug":"install","permalink":"http://example.com/tags/install/"},{"name":"Linux操作系统","slug":"Linux操作系统","permalink":"http://example.com/tags/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"Linux命令","slug":"Linux命令","date":"2022-11-11T07:18:46.000Z","updated":"2022-12-07T13:44:38.000Z","comments":true,"path":"2022/11/11/Linux命令/","link":"","permalink":"http://example.com/2022/11/11/Linux%E5%91%BD%E4%BB%A4/","excerpt":"","text":"Linux命令 # 状态表示 $ 普通用户# 管理员 更新命令1$ sudo apt update 1$ sudo apt upgrade 文件操作命令复制文件：1$ sudo cp -R sour dest 移动文件：1$ sudo mv sour dest 修改文件名：1$ sudo mv OldFilename NewFilename 删除文件：1$ sudo rm -rf Filename 查看文件：123$ cat Filename$ more Filename$ less Filename 解压命令解压tar.gz1tar -zxvf filename 解压tar.bz21tar -jxvf filename 解压tar.7z1tar 7z x filename tar命令 (tape archive)创建档案包1$ tar -cvf xxx.tar xxx 解包1$ tar -xvf xxx.tar 指定目录解包1$ tar -xvf xxx.tar -C xxx/ 归档并压缩1$ tar -zcvf xxx.tar.gz xxx 软件命令 apt(Advanced Packaging Tool)查看本地软件缓存1$ sudo apt-cache search xxx | less 安装软件1$ sudo apt install xxx 查看已安装软件数1$ apt install -installed | wc 卸载软件1$ apt list --installed | grep xxx 1$ sudo apt remove xxx 1$ sudo apt --purge xxx 1$ sudo apt autoremove 关机命令关机1$ sudo shutdown -h [now] 重启1$ sudo shutdown -r [now] 定时关机（分钟）1$ sudo shutdown +100 终端代理为当前终端添加代理12$ export http_proxy=http://proxyAddress:port$ export https_proxy=http://proxyAddress:port 清除代理12$ unset http_proxy$ unset https_procy 查看代理是否成功 请勿使用ping操作来检验，因为ping是ICMP报文，代理不转发 1$ curl cip.cc 1$ curl google.com 用户管理添加用户1$ sudo useradd -m xxx -m 在&#x2F;home下添加用户目录 修改用户密码1$ sudo passwd xxx 删除用户及创建的用户目录1$ sudo userdel -r xxx 查看用户列表1$ sudo cat /etc/passwd | less 每一行表示一个用户的信息 超级用户root su-&gt;switch user sudoer用户修改root用户密码1$ sudo passwd root 密码切换超级用户1$ sudo su root sudoer用户免密码切换root用户1$ sudo su [-l] 组创建组1$ sudo groupadd xxx 创建用户并添加进组1$ sudo useradd -m -g xxx username -g表示在创建用户的同时，将用户加到xxx小组里 修改用户小组1$ sudo usermod -g xxx username mod-modify 查看组信息1$ sudo cat /etc/group | less 每一行表示一个group信息，名称+ID 以root用户登录桌面1.先为root用户创建密码1$ sudo passwd root 2.修改配置 gedit &#x2F;etc&#x2F;pam.d&#x2F;gdm-autologin在auth required pam_succeed_if.so user !&#x3D; root quiet_success这一行前加# gedit &#x2F;etc&#x2F;pam.d&#x2F;gdm-password在auth required pam_succeed_if.so user !&#x3D; root quiet_success这一行前加# 重启电脑后登录时选择‘未列出’手工输入root及密码进行登录即可 文件的权限-owner:文件的属主 -r:文件是否可读read -w:文件是否可写write -x:文件是否可以执行excute 文件的位数意义 第0位是文件属性d-目录-文件l-链接 第1-3是所有者（作者）权限 4-6是同组权限 7-9是其他用户权限 自己|同组|别人 用户创建的时候自己就是一个独立的小组 修改文件权限 chmod，即change file mode 修改文件模式 u-user 自己 o-other 其他人 a-all 全部 省略写法 chmod +w test.txt 修改自己和本组的权限 修改文件属主 chown，即change owner chown -R username filename 环境变量 定义环境变量 1export 查看所有环境变量 1$ printenv | less 显示环境变量 1$ echo $&#123;&#125; 添加用户环境变量 修改 ~&#x2F;.profile文件 注销后即可生效 添加系统环境变量 在&#x2F;etc&#x2F;profile.d目录下创建你自己的.sh脚本 然后&#x2F;etc&#x2F;profile会自动便利profile.d目录下的所有.sh文件并调用 注销后生效 PATH变量 查看PATH变量1echo $&#123;PATH&#125; 添加系统PATH变量1vi /etc/profile.d/myprofile.sh #!&#x2F;bin&#x2F;sh export PATH&#x3D;${PATH}:&#x2F;home&#x2F;usrname 网络查看网络配置1$ ifconfig if-interface网络接口 开启&#x2F;禁用网络12$ sudo ifconfig xxx up$ sudo ifconfig xxx down 关闭&#x2F;开启防火墙1$ sudo ufw disable(enable) 进程查看进程1$ ps -ef UID:执行者 PID:进程ID PPID:父进程ID STIME:启动时间 CMD:启动时调用的命令行 进程监视12$ top$ htop 杀死进程1$ kill -9 PID 前台与后台进程 前台进程： 有父进程，父进程即为当前终端 当终端被关闭时，前台进程一同被关闭 后台进程： 父进程为系统进程（1号进程） 当终端被关闭时，后台进程不受影响 端口服务相关命令1$ ss -tln 1$ service --status-all 1$ man ssh 1$ ss -an | less 1$ netstat -an|less 杂项创建多级目录1$ mkdir -p abc/abc/abc 软连接-&gt;指针 ln(link)命令 1ln -s source link s-&gt;sort 硬链接-&gt;*(指针) 文本文件的换行符 Windows:\\r\\n Linux:\\n 只有编辑SHELL脚本时，才需要转换 查看系统内核:1$ uname -a 查看系统版本：1$ lsb_release -a","categories":[{"name":"大学课程笔记","slug":"大学课程笔记","permalink":"http://example.com/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/tags/Ubuntu/"},{"name":"Linux操作系统","slug":"Linux操作系统","permalink":"http://example.com/tags/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]}],"categories":[{"name":"复习","slug":"复习","permalink":"http://example.com/categories/%E5%A4%8D%E4%B9%A0/"},{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/categories/Ubuntu/"},{"name":"自学笔记","slug":"自学笔记","permalink":"http://example.com/categories/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"},{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"},{"name":"快捷键","slug":"快捷键","permalink":"http://example.com/categories/%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"PE","slug":"PE","permalink":"http://example.com/categories/PE/"},{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"问题记录","slug":"问题记录","permalink":"http://example.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"name":"Windows","slug":"Windows","permalink":"http://example.com/categories/Windows/"},{"name":"Mysql","slug":"Windows/Mysql","permalink":"http://example.com/categories/Windows/Mysql/"},{"name":"VSCode","slug":"VSCode","permalink":"http://example.com/categories/VSCode/"},{"name":"Windows","slug":"VSCode/Windows","permalink":"http://example.com/categories/VSCode/Windows/"},{"name":"VSCode","slug":"Ubuntu/VSCode","permalink":"http://example.com/categories/Ubuntu/VSCode/"},{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"},{"name":"UbuntuServer","slug":"UbuntuServer","permalink":"http://example.com/categories/UbuntuServer/"},{"name":"Butterfly","slug":"Butterfly","permalink":"http://example.com/categories/Butterfly/"},{"name":"电脑使用技巧","slug":"电脑使用技巧","permalink":"http://example.com/categories/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"name":"大学课程笔记","slug":"大学课程笔记","permalink":"http://example.com/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"name":"VSCode","slug":"VSCode","permalink":"http://example.com/tags/VSCode/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/tags/Ubuntu/"},{"name":"Virtual box","slug":"Virtual-box","permalink":"http://example.com/tags/Virtual-box/"},{"name":"Apache2","slug":"Apache2","permalink":"http://example.com/tags/Apache2/"},{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"http://example.com/tags/MySQL/"},{"name":"PHPMyAdmin","slug":"PHPMyAdmin","permalink":"http://example.com/tags/PHPMyAdmin/"},{"name":"wine","slug":"wine","permalink":"http://example.com/tags/wine/"},{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"},{"name":"Molly","slug":"Molly","permalink":"http://example.com/tags/Molly/"},{"name":"Windows","slug":"Windows","permalink":"http://example.com/tags/Windows/"},{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"Virtual Box","slug":"Virtual-Box","permalink":"http://example.com/tags/Virtual-Box/"},{"name":"Premiere Pro CC 2019","slug":"Premiere-Pro-CC-2019","permalink":"http://example.com/tags/Premiere-Pro-CC-2019/"},{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"},{"name":"path","slug":"path","permalink":"http://example.com/tags/path/"},{"name":"PiP","slug":"PiP","permalink":"http://example.com/tags/PiP/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"mirror","slug":"mirror","permalink":"http://example.com/tags/mirror/"},{"name":"Mirror","slug":"Mirror","permalink":"http://example.com/tags/Mirror/"},{"name":"美化","slug":"美化","permalink":"http://example.com/tags/%E7%BE%8E%E5%8C%96/"},{"name":"Linux操作系统","slug":"Linux操作系统","permalink":"http://example.com/tags/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"vi","slug":"vi","permalink":"http://example.com/tags/vi/"},{"name":"命令","slug":"命令","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4/"},{"name":"install","slug":"install","permalink":"http://example.com/tags/install/"}]}